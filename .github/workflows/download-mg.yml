name: Download MG Renderer Latest Release

on:
  schedule:
    # 每30分钟运行一次
    - cron: '*/30 * * * *'
  workflow_dispatch:
    # 允许手动触发
  push:
    branches: [ main, master ]
    paths:
      - '.github/workflows/download-mg.yml'

permissions:
  contents: write
  actions: read

jobs:
  download-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup directories
      run: |
        echo "🕐 工作流开始时间: $(date '+%Y-%m-%d %H:%M:%S %Z')"
        echo "🔄 触发方式: ${{ github.event_name }}"
        mkdir -p mg

    - name: Get latest MG release info
      id: release
      run: |
        echo "获取 MobileGlues 最新发布信息..."
        release_data=$(curl --silent "https://api.github.com/repos/MobileGL-Dev/MobileGlues-release/releases/latest")
        latest_tag=$(echo "$release_data" | jq -r '.tag_name')
        if [ "$latest_tag" = "null" ] || [ -z "$latest_tag" ]; then
          echo "❌ 无法获取最新版本标签"
          exit 1
        fi
        echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
        echo "release_data<<EOF" >> $GITHUB_OUTPUT
        echo "$release_data" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "检测到最新版本标签: $latest_tag"

    - name: Check if version needs update
      id: version_check
      run: |
        latest_tag="${{ steps.release.outputs.latest_tag }}"

        # 初始化 needs_update 为 true（假设需要更新）
        needs_update="true"

        # 检查 latest 分支是否存在
        if git show-ref --verify --quiet refs/remotes/origin/latest; then
          echo "切换到 latest 分支读取当前版本..."
          git checkout latest
          git pull origin latest

          VERSION_FILE="mg/version.txt"
          if [ -f "$VERSION_FILE" ]; then
            current_tag=$(cat "$VERSION_FILE")
            echo "当前已同步版本: $current_tag"
            if [ "$current_tag" == "$latest_tag" ]; then
              echo "已是最新版本，无需更新"
              needs_update="false"
            else
              echo "检测到新版本: $latest_tag (当前: $current_tag)"
            fi
          else
            echo "latest 分支中未找到 mg/version.txt，视为需要更新"
          fi

          # 切回默认分支（main/master）
          git checkout ${{ github.ref_name }}
        else
          echo "latest 分支不存在，视为首次运行，需要更新"
        fi

        echo "needs_update=$needs_update" >> $GITHUB_OUTPUT

    - name: Clean and Download MG APK
      if: steps.version_check.outputs.needs_update == 'true'
      run: |
        echo "开始下载 MobileGlues APK..."

        # 提取 APK URL（取第一个 .apk）
        apk_url=$(echo '${{ steps.release.outputs.release_data }}' | jq -r '.assets[] | select(.name | endswith(".apk")) | .browser_download_url' | head -n1)
        if [ -z "$apk_url" ]; then
          echo "❌ 未找到 APK 文件"
          exit 1
        fi

        echo "APK 下载地址: $apk_url"
        target="mg/MG-release.apk"
        mkdir -p "$(dirname "$target")"

        if wget --progress=bar:force -c "$apk_url" -O "$target" 2>&1; then
          if [ -s "$target" ]; then
            echo "✅ APK 下载成功，大小: $(du -h "$target" | cut -f1)"
          else
            echo "❌ APK 文件为空"
            exit 1
          fi
        else
          echo "❌ wget 下载失败"
          exit 1
        fi

    - name: Configure Git
      if: steps.version_check.outputs.needs_update == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Generate release body with timestamp
      if: steps.version_check.outputs.needs_update == 'true'
      id: release_body
      run: |
        export TZ=Asia/Shanghai
        current_time=$(date '+%Y-%m-%d %H:%M:%S %Z')
        echo "body<<EOF" >> $GITHUB_OUTPUT
        echo "MobileGlues 渲染器 (MG Renderer) 版本 ${{ steps.release.outputs.latest_tag }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "自动从官方仓库同步的最新版本。" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "**同步信息：**" >> $GITHUB_OUTPUT
        echo "- 🕐 同步时间: ${current_time}" >> $GITHUB_OUTPUT
        echo "- 📦 来源: [MobileGL-Dev/MobileGlues-release](https://github.com/MobileGL-Dev/MobileGlues-release)" >> $GITHUB_OUTPUT
        echo "- 📄 文件名: MG-release.apk" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create/Update GitHub Release for MG
      if: steps.version_check.outputs.needs_update == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: MG
        name: MobileGlues ${{ steps.release.outputs.latest_tag }}
        body: ${{ steps.release_body.outputs.body }}
        files: mg/MG-release.apk
        draft: false
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update version record in latest branch
      if: steps.version_check.outputs.needs_update == 'true'
      run: |
        latest_tag="${{ steps.release.outputs.latest_tag }}"

        # 切换或创建 latest 分支
        if git show-ref --verify --quiet refs/remotes/origin/latest; then
          git checkout latest
          git pull origin latest
        else
          git checkout --orphan latest
          git rm -rf .  # 清空历史（仅保留干净分支）
        fi

        # 写入版本文件到 mg/ 目录
        mkdir -p mg
        echo "$latest_tag" > mg/version.txt

        git add mg/version.txt
        git commit -m "Update MG version to $latest_tag"
        git push origin latest --force  # 确保推送成功（首次可能需 --set-upstream）

        echo "✅ 已更新 latest 分支中的 mg/version.txt"

    - name: Summary
      run: |
        if [ "${{ steps.version_check.outputs.needs_update }}" == "true" ]; then
          echo "✅ 成功同步并发布 MobileGlues 版本 ${{ steps.release.outputs.latest_tag }}"
          echo "🚀 APK 已上传至 Release (tag: MG)"
          echo "📋 版本记录已写入 latest 分支的 mg/version.txt"
          echo "🔗 Release 链接: https://github.com/${{ github.repository }}/releases/tag/MG"
        else
          echo "ℹ️ MobileGlues 当前已是最新版本，无需更新"
        fi
