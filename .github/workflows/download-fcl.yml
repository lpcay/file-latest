name: Download FCL Latest Release

on:
  schedule:
    # 每10分钟运行一次（GitHub Actions实际最小有效间隔）
    - cron: '*/30 * * * *'
  workflow_dispatch:
    # 允许手动触发
  push:
    branches: [ main, master ]
    paths:
      - '.github/workflows/download-fcl.yml'

permissions:
  contents: write
  actions: read

jobs:
  download-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        lfs: true

    - name: Setup directories
      run: |
        echo "🕐 工作流开始时间: $(date '+%Y-%m-%d %H:%M:%S %Z')"
        echo "🔄 触发方式: ${{ github.event_name }}"
        mkdir -p fcl
        
    - name: Get latest FCL release info
      id: release
      run: |
        echo "获取最新发布信息..."
        release_data=$(curl --silent "https://api.github.com/repos/FCL-Team/FoldCraftLauncher/releases/latest")
        latest_version=$(echo "$release_data" | jq -r '.tag_name')
        echo "latest_version=$latest_version" >> $GITHUB_OUTPUT
        echo "release_data<<EOF" >> $GITHUB_OUTPUT
        echo "$release_data" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "检测到最新版本: $latest_version"

    - name: Check if version needs update
      id: version_check
      run: |
        latest_version="${{ steps.release.outputs.latest_version }}"
        
        # 检查版本号是否有效
        if [ "$latest_version" = "null" ] || [ -z "$latest_version" ]; then
          echo "警告: 无法获取有效的版本信息 (版本: $latest_version)，跳过下载"
          echo "needs_update=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # 检查latest分支是否存在并切换到该分支读取版本文件
        if git show-ref --verify --quiet refs/remotes/origin/latest; then
          echo "切换到latest分支检查版本..."
          git checkout latest
          git pull origin latest
          
          VERSION_FILE="fcl/releases.txt"
          if [ -f "$VERSION_FILE" ]; then
            current_version=$(cat "$VERSION_FILE")
            echo "读取到当前版本: $current_version"
            echo "最新版本: $latest_version"
            
            if [ "$current_version" == "$latest_version" ]; then
              echo "当前已是最新版本 ($latest_version)，跳过下载"
              echo "needs_update=false" >> $GITHUB_OUTPUT
            else
              echo "检测到新版本: $latest_version (当前版本: $current_version)"
              echo "needs_update=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "latest分支存在但未找到版本记录文件"
            echo "needs_update=true" >> $GITHUB_OUTPUT
          fi
          
          # 切换回主分支继续后续操作
          git checkout ${{ github.ref_name }}
        else
          echo "latest分支不存在，开始下载最新版本 ($latest_version)"
          echo "needs_update=true" >> $GITHUB_OUTPUT
        fi

    - name: Clean old files
      if: steps.version_check.outputs.needs_update == 'true'
      run: |
        echo "清理旧版本文件..."
        rm -f fcl/FCL-release-*.apk

    - name: Download APK files
      if: steps.version_check.outputs.needs_update == 'true'
      run: |
        echo "开始下载APK文件到目录: fcl/"
        
        # 文件名修复函数
        fix_filename() {
          local original_name="$1"
          
          # 处理所有架构类型
          if [[ "$original_name" =~ FCL-release-[0-9.]+-(.+)\.apk$ ]]; then
            local arch_part="${BASH_REMATCH[1]}"
            echo "FCL-release-${arch_part}.apk"
          # 处理all架构的特殊情况
          elif [[ "$original_name" =~ FCL-release-[0-9.]+\.apk$ ]]; then
            echo "FCL-release-all.apk"
          # 处理无架构标识的文件名
          elif [[ "$original_name" =~ FCL-release-[0-9.]+(\.apk)$ ]]; then
            echo "FCL-release-all.apk"
          else
            # 如果都不匹配，返回原始名称
            echo "$original_name"
          fi
        }
        
        # 获取所有APK下载链接并保存到临时文件
        echo '${{ steps.release.outputs.release_data }}' | jq -r '.assets[] | select(.name | test("^FCL-release.*\\.apk$")) | .browser_download_url' > /tmp/apk_urls.txt
        
        echo "找到的下载链接:"
        cat /tmp/apk_urls.txt
        
        # 处理每个APK资源
        while IFS= read -r url; do
          if [ -z "$url" ]; then
            continue
          fi
          
          # 提取原始文件名
          original_name=$(basename "$url")
          
          # 使用修复后的文件名处理函数
          new_name=$(fix_filename "$original_name")
          target_path="fcl/$new_name"
          
          echo "下载: $original_name → 保存为: $target_path"
          echo "URL: $url"
          
          # 确保目录存在
          mkdir -p "$(dirname "$target_path")"
          
          # 下载文件，显示详细输出
          echo "开始下载..."
          if wget --progress=bar:force -c "$url" -O "$target_path" 2>&1; then
            # 检查文件是否存在且不为空
            if [ -f "$target_path" ] && [ -s "$target_path" ]; then
              file_size=$(du -h "$target_path" | cut -f1)
              echo "✅ 下载完成! 文件大小: $file_size"
              ls -la "$target_path"
              echo "--------------------------------------------------"
            else
              echo "❌ 错误: 文件下载后不存在或为空"
              ls -la fcl/ || echo "fcl目录不存在"
              exit 1
            fi
          else
            echo "❌ 错误: wget命令失败 - $url"
            exit 1
          fi
        done < /tmp/apk_urls.txt
        
        # 显示最终下载结果
        echo "所有下载完成，文件列表:"
        ls -la fcl/
        
        # 清理临时文件
        rm -f /tmp/apk_urls.txt

    - name: Update version file
      if: steps.version_check.outputs.needs_update == 'true'
      run: |
        echo "${{ steps.release.outputs.latest_version }}" > fcl/releases.txt
        echo "已更新版本记录: fcl/releases.txt"

    - name: Configure Git
      if: steps.version_check.outputs.needs_update == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Generate release body with timestamp
      if: steps.version_check.outputs.needs_update == 'true'
      id: release_body
      run: |
        export TZ=Asia/Shanghai
        current_time=$(date '+%Y-%m-%d %H:%M:%S %Z')
        echo "body<<EOF" >> $GITHUB_OUTPUT
        echo "FCL (FoldCraftLauncher) 版本 ${{ steps.release.outputs.latest_version }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "自动从官方仓库同步的最新版本。" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "**同步信息：**" >> $GITHUB_OUTPUT
        echo "- 🕐 同步时间: ${current_time}" >> $GITHUB_OUTPUT
        echo "- 📦 来源: [FCL-Team/FoldCraftLauncher](https://github.com/FCL-Team/FoldCraftLauncher)" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "**文件用途描述：**" >> $GITHUB_OUTPUT
        echo "- FCL-release-all.apk - 通用版本" >> $GITHUB_OUTPUT
        echo "- FCL-release-arm64-v8a.apk - ARM64架构" >> $GITHUB_OUTPUT
        echo "- FCL-release-armeabi-v7a.apk - ARM32架构" >> $GITHUB_OUTPUT
        echo "- FCL-release-x86.apk - x86架构" >> $GITHUB_OUTPUT
        echo "- FCL-release-x86_64.apk - x86_64架构" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create/Update GitHub Release
      if: steps.version_check.outputs.needs_update == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: FCL
        name: ${{ steps.release.outputs.latest_version }}
        body: ${{ steps.release_body.outputs.body }}
        files: |
          fcl/*.apk
        draft: false
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Switch to latest branch and update version
      if: steps.version_check.outputs.needs_update == 'true'
      run: |
        # 暂存当前版本信息
        current_version="${{ steps.release.outputs.latest_version }}"
        
        # 清理工作目录中可能冲突的文件
        rm -f fcl/releases.txt
        
        # 检查latest分支是否存在
        if git show-ref --verify --quiet refs/remotes/origin/latest; then
          echo "切换到existing latest分支"
          git checkout latest
          git pull origin latest
        else
          echo "创建新的latest分支"
          git checkout -b latest
        fi
        
        # 只保存版本记录文件到latest分支
        mkdir -p fcl
        echo "$current_version" > fcl/releases.txt
        
        git add fcl/releases.txt
        
        # 检查是否有变更需要提交
        if ! git diff --staged --quiet; then
          git commit -m "Update version to $current_version"
          git push origin latest
          echo "已更新latest分支的版本记录"
        fi

    - name: Summary
      run: |
        if [ "${{ steps.version_check.outputs.needs_update }}" == "true" ]; then
          echo "✅ 成功发布FCL版本 ${{ steps.release.outputs.latest_version }}"
          echo "🚀 APK文件已上传到GitHub Release"
          echo "📋 版本记录已更新到latest分支"
          
          # 显示下载的文件列表
          echo "📦 发布的文件:"
          ls -la fcl/*.apk 2>/dev/null || echo "未找到APK文件"
          
          echo "🔗 Release链接: https://github.com/${{ github.repository }}/releases/tag/FCL"
        else
          echo "ℹ️ 当前已是最新版本，无需更新"

        fi
